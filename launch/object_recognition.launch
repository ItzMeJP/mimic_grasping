<?xml version="1.0" encoding="UTF-8"?>
<launch>
  
  <arg name="namespace" default="object_recognition" />
  <arg name="enable_respawn" default="false" />

  <arg name="use_photoneo" default="false" />
  <arg name="use_asus" default="false" />
  <arg name="use_publisher" default="false" />
  <arg name="use_rsd435" default="false" />

  <arg name="ambient_pointcloud_topic" default="/camera/depth_registered/points" if="$(arg use_photoneo)" />
  <arg name="ambient_pointcloud_topic" default="/object_recognition/camera/depth/color/points" if="$(arg use_rsd435)" />
  <arg name="ambient_pointcloud_topic" default="/camera/depth_registered/points" if="$(arg use_asus)" />
  <arg name="ambient_pointcloud_topic" default="/publisher/depth/points" if="$(arg use_publisher)" />

  <arg name="use_object_model_caching" default="false"/>
  <arg name="number_of_recognition_retries" default="3"/>

  <arg name="sensor_frame_id" default="camera_link" />
  <arg name="base_link_frame_id" default="base_link" />
  <arg name="correction_frame_id" default="registration_correction" />

  <arg name="reference_pointcloud_filename" default="" />
  <arg name="reference_pointclouds_database_folder_path" default="$(find mimic_grasping_ros_interface_package)/models/" />

  <!-- Criterios de parada -->
  <arg name="max_registration_outliers" default="0.5" /> <!-- percentagem da nuvem do sensor que teve overlap a superficie do cad-->
  <arg name="max_registration_outliers_reference_pointcloud" default="0.8" /> <!-- percentagem da superficie do cad da peça com overlap com a nuvem do sensor -->

	<arg name="use_cloud_storage_mode" default="false" />
	<arg name="use_voxel_grid_segmentation_in_cloud_storage_mode" default="true" />
	<arg name="use_random_sample_segmentation_in_cloud_storage_mode" default="false" />

  <!-- Para cada variável de controlo abaixo é necessário associar um yaml_filename. Este yaml sera carregado caso a variavel de controlo seja true-->
  <!-- no pacote OR, nomeadamenta ObjectRecognition.launch, há todos as variáveis de controlo, bem como seu yaml associado, para exemplos-->
  <arg name="use_voxel_grid" default="true" />
	<arg name="use_random_sample" default="false" />
	<arg name="use_noise_removal" default="false" />
	<arg name="use_normal_estimation" default="true" />
	<arg name="use_plane_segmentation" default="true" />
  <arg name="use_region_growing_segmentation" default="false" />

	<arg name="use_euclidean_clustering_segmentation" default="false" />
	<arg name="use_pca_for_initial_alignment" default="false" />
	<arg name="use_feature_matching_for_initial_alignment" default="true" />
	<arg name="load_initial_pose_estimation_pipeline_using_pca" default="$(eval use_pca_for_initial_alignment and not use_feature_matching_for_initial_alignment)" />
	<arg name="use_cloud_matching" default="true" />
	<arg name="use_curvature_estimation" default="$(arg use_feature_matching_for_initial_alignment)" />
	<arg name="use_transformation_aligner" default="false" />

  <!-- A ordem que estes yaml são apresentados não tem a ver com a ordem de carregamento na pipeline. Esta ordem é efetuada pelos namespaces. -->
  <!-- Contudo inseri esta ordem para me orientar. Por exemplo, o normal estimation é util no filtro de planos que está no filters_roi e utiliza as normais para calcular-->
  <arg name="yaml_configuration_initial_pose_estimators_feature_matchers_filename" default="$(find mimic_grasping_ros_interface_package)/config/perception/initial_pose_estimators_feature_matchers.yaml" />
  <arg name="yaml_configuration_filters_roi_filename" default="$(find mimic_grasping_ros_interface_package)/config/perception/filters_roi.yaml" />
  <arg name="yaml_configuration_filters_plane_segmentation_filename" default="$(find mimic_grasping_ros_interface_package)/config/perception/filters_plane_segmentation.yaml" />
  <arg name="yaml_configuration_filters_region_growing_filename" default="$(find mimic_grasping_ros_interface_package)/yaml/filters_region_growing.yaml" />

  <arg name="yaml_configuration_filters_voxel_grid_filename" default="$(find mimic_grasping_ros_interface_package)/config/perception/filters_voxel_grid.yaml" />
	<arg name="yaml_configuration_filters_noise_removal_filename" default="$(find mimic_grasping_ros_interface_package)/config/perception/filters_noise_removal.yaml" />
	<arg name="yaml_configuration_filters_euclidean_clustering_filename" default="$(find mimic_grasping_ros_interface_package)/config/perception/filters_euclidean_clustering.yaml" />
	<arg name="yaml_configuration_normal_estimators_filename" default="$(find mimic_grasping_ros_interface_package)/config/perception/normal_estimators.yaml" />

	<arg name="yaml_configuration_initial_pose_estimators_point_matchers_filename" default="$(find mimic_grasping_ros_interface_package)/config/perception/pose_estimators_refined.yaml" />
	<arg name="yaml_configuration_outlier_detectors_filename" default="$(find mimic_grasping_ros_interface_package)/config/perception/outlier_detectors.yaml" />
	<arg name="yaml_configuration_transformation_validators_filename" default="$(find mimic_grasping_ros_interface_package)/config/perception/transformation_validators.yaml" />
	<arg name="yaml_configuration_custom_filename" default="" /> <!-- extra custom configurations -->

	<include file="$(find object_recognition_skill_server)/launch/object_recognition.launch">

    <arg name="sensor_frame_id" default="$(arg sensor_frame_id)" />
    <arg name="object_frame_id" default="object" />

		<arg name="ambient_pointcloud_topic" default="$(arg ambient_pointcloud_topic)" />
		<arg name="number_of_recognition_retries" default="$(arg number_of_recognition_retries)"/>

		<!-- 3d processing pipeline parameters for cloud storage -->
		<arg name="use_cloud_storage_mode" default="$(arg use_cloud_storage_mode)" />
		<arg name="use_voxel_grid_segmentation_in_cloud_storage_mode" default="$(arg use_voxel_grid_segmentation_in_cloud_storage_mode)" />
		<arg name="use_random_sample_segmentation_in_cloud_storage_mode" default="$(arg use_random_sample_segmentation_in_cloud_storage_mode)" />
		<arg name="use_object_model_caching" default="$(arg use_object_model_caching)"/>

		<!-- 3d processing pipeline parameters for cloud registration -->
		<arg name="use_voxel_grid" default="$(arg use_voxel_grid)" />
		<arg name="use_random_sample" default="$(arg use_random_sample)" />
		<arg name="use_noise_removal" default="$(arg use_noise_removal)" />
		<arg name="use_normal_estimation" default="$(arg use_normal_estimation)" />
		<arg name="use_curvature_estimation" default="$(arg use_curvature_estimation)" />
		<arg name="use_plane_segmentation" default="$(arg use_plane_segmentation)" />
		<arg name="use_euclidean_clustering_segmentation" default="$(arg use_euclidean_clustering_segmentation)" />
		<arg name="use_feature_matching_for_initial_alignment" default="$(arg use_feature_matching_for_initial_alignment)" />
		<arg name="use_pca_for_initial_alignment" default="$(arg use_pca_for_initial_alignment)" />
		<arg name="load_initial_pose_estimation_pipeline_using_pca" default="$(arg load_initial_pose_estimation_pipeline_using_pca)" />
		<arg name="use_cloud_matching" default="$(arg use_cloud_matching)" />
		<arg name="use_transformation_aligner" default="$(arg use_transformation_aligner)" />
		<arg name="max_registration_outliers" default="$(arg max_registration_outliers)" />
		<arg name="max_registration_outliers_reference_pointcloud" default="$(arg max_registration_outliers_reference_pointcloud)" />

		<!-- configuration files (empty paths can be given for avoiding the rosparam load) -->
		<arg name="yaml_configuration_filters_roi_filename" default="$(arg yaml_configuration_filters_roi_filename)" />
		<arg name="yaml_configuration_filters_voxel_grid_filename" default="$(arg yaml_configuration_filters_voxel_grid_filename)" />
		<arg name="yaml_configuration_filters_noise_removal_filename" default="$(arg yaml_configuration_filters_noise_removal_filename)" />
		<arg name="yaml_configuration_filters_euclidean_clustering_filename" default="$(arg yaml_configuration_filters_euclidean_clustering_filename)" />
		<arg name="yaml_configuration_normal_estimators_filename" default="$(arg yaml_configuration_normal_estimators_filename)" />
		<arg name="yaml_configuration_curvature_estimators_filename" default="" />
		<arg name="yaml_configuration_initial_pose_estimators_feature_matchers_filename" default="$(arg yaml_configuration_initial_pose_estimators_feature_matchers_filename)" />
		<arg name="yaml_configuration_initial_pose_estimators_point_matchers_filename" default="$(arg yaml_configuration_initial_pose_estimators_point_matchers_filename)" />
		<arg name="yaml_configuration_outlier_detectors_filename" default="$(arg yaml_configuration_outlier_detectors_filename)" />
		<arg name="yaml_configuration_transformation_validators_filename" default="$(arg yaml_configuration_transformation_validators_filename)" />
		<arg name="yaml_configuration_custom_filename" default="$(arg yaml_configuration_custom_filename)" />

		<!-- reference map data -->
		<arg name="reference_pointcloud_filename" default="$(arg reference_pointcloud_filename)" />
		<arg name="reference_pointclouds_database_folder_path" default="$(arg reference_pointclouds_database_folder_path)" />
	</include>

</launch>
